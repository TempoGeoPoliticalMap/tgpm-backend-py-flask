# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from openapi_server import util
from openapi_server.models.base_model_ import Model


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, wikidata_id=None, name=None, coodrinate=None):  # noqa: E501
        """Location - a model defined in OpenAPI

        :param wikidata_id: The wikidata_id of this Location.  # noqa: E501
        :type wikidata_id: str
        :param name: The name of this Location.  # noqa: E501
        :type name: str
        :param coodrinate: The coodrinate of this Location.  # noqa: E501
        :type coodrinate: str
        """
        self.openapi_types = {"wikidata_id": str, "name": str, "coodrinate": str}

        self.attribute_map = {
            "wikidata_id": "wikidataId",
            "name": "name",
            "coodrinate": "coodrinate",
        }

        self._wikidata_id = wikidata_id
        self._name = name
        self._coodrinate = coodrinate

    @classmethod
    def from_dict(cls, dikt) -> "Location":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Location of this Location.  # noqa: E501
        :rtype: Location
        """
        return util.deserialize_model(dikt, cls)

    @property
    def wikidata_id(self):
        """Gets the wikidata_id of this Location.


        :return: The wikidata_id of this Location.
        :rtype: str
        """
        return self._wikidata_id

    @wikidata_id.setter
    def wikidata_id(self, wikidata_id):
        """Sets the wikidata_id of this Location.


        :param wikidata_id: The wikidata_id of this Location.
        :type wikidata_id: str
        """

        self._wikidata_id = wikidata_id

    @property
    def name(self):
        """Gets the name of this Location.


        :return: The name of this Location.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.


        :param name: The name of this Location.
        :type name: str
        """

        self._name = name

    @property
    def coodrinate(self):
        """Gets the coodrinate of this Location.


        :return: The coodrinate of this Location.
        :rtype: str
        """
        return self._coodrinate

    @coodrinate.setter
    def coodrinate(self, coodrinate):
        """Sets the coodrinate of this Location.


        :param coodrinate: The coodrinate of this Location.
        :type coodrinate: str
        """

        self._coodrinate = coodrinate
