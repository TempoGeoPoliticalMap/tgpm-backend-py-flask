# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.basic_error_object import BasicErrorObject
from openapi_server.models.error403_all_of import Error403AllOf
from openapi_server import util

from openapi_server.models.basic_error_object import BasicErrorObject  # noqa: E501
from openapi_server.models.error403_all_of import Error403AllOf  # noqa: E501


class Error403(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self, id=None, code=None, detail=None, source=None, status=None, title=None
    ):  # noqa: E501
        """Error403 - a model defined in OpenAPI

        :param id: The id of this Error403.  # noqa: E501
        :type id: str
        :param code: The code of this Error403.  # noqa: E501
        :type code: int
        :param detail: The detail of this Error403.  # noqa: E501
        :type detail: str
        :param source: The source of this Error403.  # noqa: E501
        :type source: str
        :param status: The status of this Error403.  # noqa: E501
        :type status: object
        :param title: The title of this Error403.  # noqa: E501
        :type title: object
        """
        self.openapi_types = {
            "id": str,
            "code": int,
            "detail": str,
            "source": str,
            "status": object,
            "title": object,
        }

        self.attribute_map = {
            "id": "id",
            "code": "code",
            "detail": "detail",
            "source": "source",
            "status": "status",
            "title": "title",
        }

        self._id = id
        self._code = code
        self._detail = detail
        self._source = source
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt) -> "Error403":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Error403 of this Error403.  # noqa: E501
        :rtype: Error403
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Error403.


        :return: The id of this Error403.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Error403.


        :param id: The id of this Error403.
        :type id: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this Error403.

        An application-specific error code, expressed as a string value.  # noqa: E501

        :return: The code of this Error403.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Error403.

        An application-specific error code, expressed as a string value.  # noqa: E501

        :param code: The code of this Error403.
        :type code: int
        """

        self._code = code

    @property
    def detail(self):
        """Gets the detail of this Error403.

        A human-readable explanation specific to this occurrence of the problem.  # noqa: E501

        :return: The detail of this Error403.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Error403.

        A human-readable explanation specific to this occurrence of the problem.  # noqa: E501

        :param detail: The detail of this Error403.
        :type detail: str
        """

        self._detail = detail

    @property
    def source(self):
        """Gets the source of this Error403.

        An object containing references to the source of the error.  # noqa: E501

        :return: The source of this Error403.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Error403.

        An object containing references to the source of the error.  # noqa: E501

        :param source: The source of this Error403.
        :type source: str
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this Error403.


        :return: The status of this Error403.
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Error403.


        :param status: The status of this Error403.
        :type status: object
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this Error403.


        :return: The title of this Error403.
        :rtype: object
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Error403.


        :param title: The title of this Error403.
        :type title: object
        """

        self._title = title
